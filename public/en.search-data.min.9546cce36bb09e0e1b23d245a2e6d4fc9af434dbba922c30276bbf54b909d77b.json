[{"id":0,"href":"/golang/basics/hello-world/","title":"Hello World","section":"Основы языка","content":" Задача: Hello World # Описание # Создайте программу, которая выводит \u0026ldquo;Hello, World!\u0026rdquo; в консоль.\nТребования # Программа должна быть в пакете main Использовать функцию main() как точку входа Вывести текст \u0026ldquo;Hello, World!\u0026rdquo; с помощью fmt.Println Решение # package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } Объяснение # package main - объявляет пакет main, необходимый для исполняемых программ import \u0026quot;fmt\u0026quot; - импортирует пакет fmt для функций ввода/вывода func main() - главная функция, точка входа в программу fmt.Println() - выводит строку в консоль с переводом строки Запуск # go run main.go "},{"id":1,"href":"/docs/example/","title":"О проекте","section":"Docs","content":" Ohmygo # Кто мы # Наша цель # Me # "},{"id":2,"href":"/golang/basics/","title":"Основы языка","section":"Golang Задачи","content":" Основы языка Go # Задачи для изучения базовых конструкций языка Go.\n"},{"id":3,"href":"/golang/","title":"Golang Задачи","section":"Index","content":" Golang Задачи # Добро пожаловать в раздел задач по Go! Здесь вы найдете практические упражнения для изучения и совершенствования навыков программирования на Go.\nКатегории задач # Основы языка - базовые конструкции, типы данных, функции Структуры данных - массивы, слайсы, карты, структуры Concurrency - горутины, каналы, синхронизация Веб-разработка - HTTP серверы, REST API, middleware Работа с базами данных - SQL, NoSQL, ORM Алгоритмы - сортировка, поиск, рекурсия Выберите задачу из меню слева или начните с основ языка.\n"},{"id":4,"href":"/golang/concurrency/","title":"Concurrency","section":"Golang Задачи","content":" Concurrency в Go # Задачи по работе с горутинами, каналами и синхронизацией.\n"},{"id":5,"href":"/golang/web/","title":"Веб-разработка","section":"Golang Задачи","content":" Веб-разработка на Go # func main() { http.HandleFunc(\u0026#34;/\u0026#34;, func(w http.ResponseWriter, r *http.Request) { ctx := r.Context() select { case \u0026lt;-time.After(10 * time.Second): w.Write([]byte(\u0026#34;Done\u0026#34;)) case \u0026lt;-ctx.Done(): log.Print(\u0026#34;Canceled\u0026#34;) } }) server := \u0026amp;http.Server{Addr: \u0026#34;:8080\u0026#34;} go server.ListenAndServe() // Как добавить graceful shutdown с таймаутом 5 секунд? // Куда вставить обработку сигналов? } "}]